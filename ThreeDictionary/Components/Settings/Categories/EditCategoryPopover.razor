@using ThreeDictionary.Application.Services
@using ThreeDictionary.Domain.Entities
@inject LibraryCategoryService LibraryCategoryService

<MudPopover Open="@Open" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" AnchorEl="@AnchorEl">
    <MudPaper Class="pa-4" Elevation="8" Style="min-width: 360px;">
        <MudText Typo="Typo.h6" Class="mb-2">Edit Category</MudText>
        <MudTextField @bind-Value="_name" Label="Name" Immediate="true" Required="true" RequiredError="Name is required" MaxLength="100" />
        <MudSelect T="int?" @bind-Value="_parentId" Label="Parent (optional)" Class="mt-2" Clearable="true">
            <MudSelectItem Value="@( (int?)null )">None</MudSelectItem>
            @foreach (var c in Categories.OrderBy(c => c.Name))
            {
                if (c.Id != _id)
                {
                    <MudSelectItem Value="@( (int?)c.Id )">@c.Name</MudSelectItem>
                }
            }
        </MudSelect>
        @if (!string.IsNullOrWhiteSpace(_error))
        {
            <MudText Color="Color.Error" Typo="Typo.caption">@_error</MudText>
        }
        <MudStack Row Justify="Justify.FlexEnd" Class="mt-3">
            <MudButton Variant="Variant.Text" OnClick="OnCancel">Cancel</MudButton>
            <MudButton Class="ml-2" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_saving" OnClick="SaveAsync">
                @if (_saving) { <MudProgressCircular Indeterminate Size="Size.Small" Class="mr-2" /> }
                Save
            </MudButton>
        </MudStack>
    </MudPaper>
</MudPopover>

@code {
    [Parameter] public bool Open { get; set; }
    [Parameter] public ElementReference AnchorEl { get; set; }
    [Parameter] public List<LibraryCategory> Categories { get; set; } = new();
    [Parameter] public LibraryCategory? Category { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }

    private int _id;
    private string _originalName = string.Empty;
    private string _name = string.Empty;
    private int? _parentId = null;
    private bool _saving;
    private string? _error;

    protected override void OnParametersSet()
    {
        if (Open && Category is not null)
        {
            if (_id != Category.Id)
            {
                _id = Category.Id;
                _originalName = Category.Name ?? string.Empty;
                _name = _originalName;
                _parentId = Category.ParentId;
                _error = null;
            }
        }
    }

    private async Task OnCancel()
    {
        _error = null;
        await OnClose.InvokeAsync();
    }

    private async Task SaveAsync()
    {
        _error = null;
        var name = _name?.Trim() ?? string.Empty;
        if (string.IsNullOrWhiteSpace(name))
        {
            _error = "Name is required";
            return;
        }
        if (_parentId == _id)
        {
            _error = "A category cannot be its own parent.";
            return;
        }
        if (!string.Equals(name, _originalName, StringComparison.Ordinal) && await LibraryCategoryService.CategoryExistsAsync(name))
        {
            _error = "A category with this name already exists.";
            return;
        }
        try
        {
            _saving = true;
            await LibraryCategoryService.UpdateCategoryAsync(new LibraryCategory
            {
                Id = _id,
                Name = name,
                ParentId = _parentId
            });
            await OnSaved.InvokeAsync();
            await OnClose.InvokeAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _saving = false;
        }
    }
}