@page "/settings/categories"
@using ThreeDictionary.Application.Services
@using ThreeDictionary.Domain.Entities
@attribute [Authorize(Roles = "Admin")]
@inject LibraryCategoryService LibraryCategoryService
@inject IDialogService DialogService

<PageTitle>Categories</PageTitle>

@if (!_loaded)
{
    <Loading />
}
else
{
    <MudStack Row AlignItems="AlignItems.Center" Class="mt-2">
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddDialogAsync">
            Add Category
        </MudButton>
    </MudStack>

    @if (_categories.Count == 0)
    {
        <MudAlert Severity="Severity.Info" Class="mt-3">No categories found. Please add a new category.</MudAlert>
    }
    else
    {
        <CategoryDataGrid Items="@_categories" OnEditRequested="OpenEditDialogAsync" OnDeleteRequested="ConfirmDeleteAsync" />
    }
}

@code {
    private List<LibraryCategory> _categories = new();
    private bool _loaded;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        _categories = await LibraryCategoryService.GetCategoriesAsync();
        _loaded = true;
        StateHasChanged();
    }

    private async Task OpenAddDialogAsync()
    {
        var parameters = new DialogParameters { ["Categories"] = _categories };
        var options = new DialogOptions { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.Center };
        var dialog = DialogService.Show<NewCategoryDialog>("New Category", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadAsync();
        }
    }
    
    private async Task OpenEditDialogAsync(LibraryCategory category)
    {
        var parameters = new DialogParameters
        {
            ["Categories"] = _categories,
            ["Category"] = category
        };
        var options = new DialogOptions { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.Center };
        var dialog = DialogService.Show<EditCategoryDialog>("Edit Category", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadAsync();
        }
    }

    private async Task ConfirmDeleteAsync(LibraryCategory category)
    {
        var hasChildren = await LibraryCategoryService.HasChildrenAsync(category.Id);
        var childrenNote = hasChildren ? "<br/><b>Note:</b> This category has child categories which will also be deleted." : string.Empty;
        bool? result = await DialogService.ShowMessageBox(
            title: "Delete Category",
            markupMessage: (MarkupString)$"Are you sure you want to delete '<b>{category.Name}</b>'?<br/><br/><b>Warning:</b> This will also delete the corresponding folder and <b>all files inside it</b> from disk. This action cannot be undone.{childrenNote}",
            yesText: "Delete",
            noText: "Cancel",
            options: new DialogOptions { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.Center }
        );

        if (result == true)
        {
            await DeleteCategoryAsync(category);
        }
    }

    private async Task DeleteCategoryAsync(LibraryCategory category)
    {
        try
        {
            await LibraryCategoryService.DeleteCategoryAsync(category.Id);
            await LoadAsync();
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox(
                title: "Delete Failed",
                markupMessage: (MarkupString)$"An error occurred while deleting the category: <br/><br/><code>{ex.Message}</code>",
                yesText: "OK",
                options: new DialogOptions { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.Center }
            );
        }
    }


}

