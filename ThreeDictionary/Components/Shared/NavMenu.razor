@using ThreeDictionary.Domain.Enums
@implements IDisposable

@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        <MudStack Spacing="0">
            <MudButton Href="/" Color="Color.Inherit" Class="btn-square-fit">
                <MudIcon Icon="@Icons.Material.Outlined.Folder"/>
            </MudButton>
        </MudStack>
    </Authorized>
</AuthorizeView>
<MudSpacer/>

<MudStack Spacing="0">
    <AuthorizeView Roles="@UserRoles.Admin">
        <Authorized>
            <MudButton Href="/settings/configuration" Color="Color.Inherit" Class="btn-square-fit">
                <MudIcon Icon="@Icons.Material.Outlined.Settings"/>
            </MudButton>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView>
        <Authorized>
            <MudButton Href="/account/manage" Color="Color.Inherit" Class="btn-square-fit">
                <MudIcon Icon="@Icons.Material.Outlined.AccountCircle"/>
            </MudButton>
            <form class="btn-square-fit" action="Account/Logout" method="post">
                <AntiforgeryToken/>
                <input type="hidden" name="ReturnUrl" value="@_currentUrl"/>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Error" Class="btn-square-fit">
                    <MudIcon Icon="@Icons.Material.Outlined.Logout"/>
                </MudButton>
            </form>
        </Authorized>
    </AuthorizeView>
</MudStack>

<style>
    .btn-square-fit {
        height: 100%;
        aspect-ratio: 1 / 1;
        padding: 0;
        display: grid;
        place-items: center;
        min-width: 0;
    }
</style>


@code {
    private string? _currentUrl;

    protected override void OnInitialized()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}