@inject ISnackbar Snackbar
<MudDialog Class="pa-4" Style="align-items: center; justify-content: center;">
    <DialogContent>
        <MudStack Spacing="2" Class="text-center">
            <MudText Typo="Typo.h6">Set Root Directory</MudText>
            <MudText Typo="Typo.body1">Please type the root directory for your library.</MudText>
            <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                <MudTextField T="string"
                              Label="Root Directory"
                              @bind-Value="Globals.LibraryPath"
                              Required
                              RequiredError="Root Directory is required!"
                              OnlyValidateIfDirty="false"
                              Variant="Variant.Outlined"
                              FullWidth
                              Validation="@(new Func<string, IEnumerable<string>>(ValidateDirectory))"/>
            </MudForm>
            @* <MudTextField Validation="" @bind-Value="Globals.LibraryPath" Label="Directory Path" Variant="Variant.Outlined" *@
            @*               FullWidth Required/> *@
            <MudButton OnClick="@(() => Submit(Globals.LibraryPath))" Color="Color.Primary" Variant="Variant.Filled"
                       FullWidth>Submit
            </MudButton>
        </MudStack>
    </DialogContent>
</MudDialog>



@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    private MudForm _form;
    private bool _success;
    private string[] _errors = [];

    protected override async Task OnInitializedAsync()
    {
        var options = MudDialog.Options with
        {
            NoHeader = true,
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            BackdropClick = false,
        };

        await MudDialog.SetOptionsAsync(options);
    }

    private void Submit(string path)
    {
        _form.Validate();
        if (!_success) return;
        Snackbar.Add("Default directory set successfully.", Severity.Success);
        Globals.LibraryPath = path;
        MudDialog.Close(DialogResult.Ok(true));
    }

    private IEnumerable<string> ValidateDirectory(string path)
    {
        if (string.IsNullOrWhiteSpace(path))
        {
            yield return "Root directory is required!";
            yield break;
        }
        if (!Path.Exists(path) || !Directory.Exists(path))
        {
            yield return "The selected path is not a valid directory.";
        }
        var assetsPath = Path.Combine(path, "Assets");
        if (!Directory.Exists(assetsPath))
        {
            Directory.CreateDirectory(assetsPath);
        }
        else if (Directory.Exists(assetsPath) && Directory.GetFiles(assetsPath).Length > 0)
        {
            yield return "The selected directory already contains assets. Please choose an empty directory.";
        }
    }

}