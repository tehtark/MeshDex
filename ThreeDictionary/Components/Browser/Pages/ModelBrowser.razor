@using ThreeDictionary.Application.Services
@using ThreeDictionary.Domain.Entities
@inject IDialogService DialogService
@inject LibraryModelService LibraryModelService
<div style="padding-top: 20px;">
    <MudAppBar Dense="true" Gutters="false" Class="height-20" Elevation="0">
        <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center" Class="height-20">
            <MudMenu Variant="Variant.Text" RelativeWidth="DropdownWidth.Adaptive" Class="height-20"
                     Style="width:min-content" Dense="true" Label="File">
                <MudMenuItem Class="height-20" Label="New" OnClick="@OnNewFile"/>
            </MudMenu>
        </MudStack>
    </MudAppBar>

    <div class="pa-3">


        @if (!_loaded || _models == null)
        {
            <Loading/>
        }
        else
        {
            @if (_models is { Count: 0 })
            {
                <MudText Typo="Typo.body1">No models in the library.</MudText>
            }
            else
            {
                <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(140px, 1fr)); gap: 12px;">
                    @foreach (var model in _models)
                    {
                        <MudPaper Height="140px" Width="100%" Class="d-flex justify-center align-center">
                            @model.Name
                        </MudPaper>
                    }
                </div>
            }
        }
    </div>
</div>
<style>
    .height-20 {
        height: 20px;
        min-height: 20px;
    }
</style>


@code {
    private bool _loaded;
    private List<LibraryModel>? _models;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        _models = await LibraryModelService.GetAllModelsAsync();
        _loaded = true;
    }

    private async Task OnNewFile()
    {
        var dialogRef = await DialogService.ShowAsync<AddNewModelDialog>("Add New Model", new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            BackdropClick = false
        });
        var result = await dialogRef.Result;
        if (result is { Canceled: false })
        {
            await Load();
            StateHasChanged();
        }
    }

}