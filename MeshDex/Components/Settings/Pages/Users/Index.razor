@page "/settings/users"
@using System.Security.Claims
@using MeshDex.Domain.Entities
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = "Admin")]
@inject UserManager<User> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<PageTitle>Users</PageTitle>

@if (!_loaded)
{
    <Loading />
}
else
{
    <MudStack Row AlignItems="AlignItems.Center" Class="mt-2">
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PersonAdd" OnClick="OpenAddDialogAsync">
            Add User
        </MudButton>
    </MudStack>

    @if (_users.Count == 0)
    {
        <MudAlert Severity="Severity.Info" Class="mt-3">No users found. Please add a new user.</MudAlert>
    }
    else
    {
        <UsersDataGrid Items="@_users" OnEditRequested="OpenEditDialogAsync" OnDeleteRequested="ConfirmDeleteAsync" CurrentUserId="@_currentUserId" />
    }
}

@code {
    private List<User> _users = new();
    private bool _loaded;
    private string? _currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        _currentUserId = principal?.FindFirstValue(ClaimTypes.NameIdentifier);
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        _users = await UserManager.Users.AsNoTracking().ToListAsync();
        _loaded = true;
        StateHasChanged();
    }

    private async Task OpenAddDialogAsync()
    {
        var options = new DialogOptions { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.Center };
        var dialog = DialogService.Show<NewUserDialog>("New User", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadAsync();
        }
    }

    private async Task OpenEditDialogAsync(User user)
    {
        var parameters = new DialogParameters
        {
            ["User"] = user
        };
        var options = new DialogOptions { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.Center };
        var dialog = DialogService.Show<EditUserDialog>("Edit User", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadAsync();
        }
    }

    private async Task ConfirmDeleteAsync(User user)
    {
        // Prevent deleting yourself
        if (_currentUserId == user.Id)
        {
            await DialogService.ShowMessageBox(
                title: "Not Allowed",
                message: "You cannot delete your own account.",
                yesText: "OK",
                options: new DialogOptions { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.Center }
            );
            return;
        }

        bool? result = await DialogService.ShowMessageBox(
            title: "Delete User",
            message: $"Are you sure you want to delete '{user.UserName}'? This action cannot be undone.",
            yesText: "Delete",
            noText: "Cancel",
            options: new DialogOptions { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.Center }
        );

        if (result == true)
        {
            await DeleteUserAsync(user);
        }
    }

    private async Task DeleteUserAsync(User user)
    {
        try
        {
            var fresh = await UserManager.FindByIdAsync(user.Id);
            if (fresh is null)
            {
                await DialogService.ShowMessageBox(
                    title: "Delete Failed",
                    message: "User not found.",
                    yesText: "OK",
                    options: new DialogOptions { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.Center }
                );
                return;
            }

            const string adminRole = "Admin";
            if (await UserManager.IsInRoleAsync(fresh, adminRole))
            {
                var admins = await UserManager.GetUsersInRoleAsync(adminRole);
                if (admins.Count <= 1)
                {
                    await DialogService.ShowMessageBox(
                        title: "Delete Blocked",
                        message: "You cannot delete the last Admin account.",
                        yesText: "OK",
                        options: new DialogOptions { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.Center }
                    );
                    return;
                }
            }

            var deleteResult = await UserManager.DeleteAsync(fresh);
            if (!deleteResult.Succeeded)
            {
                var error = string.Join("\n", deleteResult.Errors.Select(e => e.Description));
                await DialogService.ShowMessageBox(
                    title: "Delete Failed",
                    message: error,
                    yesText: "OK",
                    options: new DialogOptions { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.Center }
                );
                return;
            }

            Snackbar.Add($"User '{fresh.UserName}' deleted successfully.", Severity.Success);
            await LoadAsync();
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox(
                title: "Delete Failed",
                message: ex.Message,
                yesText: "OK",
                options: new DialogOptions { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.Center }
            );
        }
    }
}