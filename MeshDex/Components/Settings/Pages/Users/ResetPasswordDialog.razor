@using MeshDex.Domain.Entities
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>Reset Password</TitleContent>
    <DialogContent>
        <MudForm @ref="_form" Model="this" Validation="Validate">
            <MudText Typo="Typo.body2" Class="mb-2">
                Enter a new password for this user. This action takes effect immediately.
            </MudText>
            <MudTextField @bind-Value="_password" Label="New Password" InputType="InputType.Password" Required="true" For="() => _password" />
            <MudTextField @bind-Value="_confirmPassword" Label="Confirm New Password" InputType="InputType.Password" Required="true" For="() => _confirmPassword" />
            @if (!string.IsNullOrEmpty(_error))
            {
                <MudAlert Severity="Severity.Error" Class="mt-2">@_error</MudAlert>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="@_saving" OnClick="ResetAsync">
            @if (_saving)
            {
                <MudProgressCircular Indeterminate Size="Size.Small" Class="mr-2" />
            }
            Reset Password
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }
    [Parameter] public User User { get; set; } = default!;

    private MudForm? _form;
    private string _password = string.Empty;
    private string _confirmPassword = string.Empty;
    private string? _error;
    private bool _saving;

    private IEnumerable<string> Validate()
    {
        var errors = new List<string>();
        if (string.IsNullOrWhiteSpace(_password)) errors.Add("Password is required");
        if (string.IsNullOrWhiteSpace(_confirmPassword)) errors.Add("Confirm Password is required");
        if (!string.Equals(_password, _confirmPassword, StringComparison.Ordinal)) errors.Add("Passwords do not match");
        return errors;
    }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private async Task ResetAsync()
    {
        _error = null;
        await _form!.Validate();
        if (!_form.IsValid) return;

        try
        {
            // Re-fetch user to ensure a fresh instance
            var user = await UserManager.FindByIdAsync(User.Id);
            if (user is null)
            {
                _error = "User not found";
                return;
            }

            _saving = true;

            var token = await UserManager.GeneratePasswordResetTokenAsync(user);
            var result = await UserManager.ResetPasswordAsync(user, token, _password);
            if (!result.Succeeded)
            {
                _error = string.Join("\n", result.Errors.Select(e => e.Description));
                return;
            }

            // Optionally: invalidate all sign-ins by updating security stamp
            // await UserManager.UpdateSecurityStampAsync(user);

            Snackbar.Add("Password reset successfully.", Severity.Success);
            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _saving = false;
        }
    }
}
